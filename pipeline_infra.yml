name: InfraPipeline_$(Date:yyyyMMdd)$(Rev:rr)

trigger:
  branches:
    include: 
      - main
  paths:
    include: 
      - infra/*

pool:
  name: 'Agent pool'

variables:
  awsRegion: 'ap-south-1'
  terraformDirectory: '$(System.DefaultWorkingDirectory)/infra/dev'
  destroyResources: 'false'

stages:
  - stage: TerragruntDestroy
    displayName: 'Terragrunt Destroy'
    condition: eq(variables['destroyResources'], 'true')
    jobs:
      - job: DestroyInfra
        steps:
          - checkout: self
          - template: templates/install-tools.yml
            parameters:
              tools:
                - terraform 
                - terragrunt
          - script: |
              cd $(terraformDirectory)
              terragrunt destroy --all -auto-approve
            displayName: 'Terragrunt Destroy'

  - stage: WriteDestroyFlag
    displayName: 'Write Destroy Flag'
    condition: always()
    jobs:
      - job: WriteFlag
        steps:
          - script: |
              mkdir -p $(Pipeline.Workspace)/destroy_info
              echo "$(destroyResources)" > $(Pipeline.Workspace)/destroy_info/destroy_flag.txt
            displayName: 'Write destroy flag to file'
          - publish: $(Pipeline.Workspace)/destroy_info
            artifact: DestroyInfo

  - stage: TerragruntPlan
    condition: ne(variables['destroyResources'], 'true')
    displayName: 'Terragrunt Plan'
    jobs:
      - job: PlanInfra
        steps:
          - checkout: self
          - script: |
              echo "Installing unzip utility..."
              sudo apt-get update
              sudo apt-get install -y unzip
            displayName: 'Install unzip utility'
  # Make sure this step runs BEFORE the Terraform installation step
          - template: templates/install-tools.yml
            parameters:
              tools:
                - terraform 
                - terragrunt
          - script: |
              cd $(terraformDirectory)
              terragrunt plan --all
            displayName: 'Terragrunt Plan'

  - stage: TerragruntApply
    displayName: 'Terragrunt Apply'
    condition: succeeded('TerragruntPlan')
    jobs:
      - job: ApplyInfra
        steps:
          - checkout: self
          - template: templates/install-tools.yml
            parameters:
              tools:
                - terraform 
                - terragrunt
          - script: |
              cd $(terraformDirectory)
              terragrunt apply --all -auto-approve
            displayName: 'Terragrunt Apply'
          - script: |
              cd $(terraformDirectory)/ec2
              EC2_IP=$(terragrunt output -raw public_ip)
              EC2_INSTANCE_ID=$(terragrunt output -raw instance_id)
              mkdir -p $(Pipeline.Workspace)/ec2_connection_info
              echo "$EC2_IP" > $(Pipeline.Workspace)/ec2_connection_info/ip_info.txt
              echo "$EC2_INSTANCE_ID" > $(Pipeline.Workspace)/ec2_connection_info/instance_id.txt
            displayName: 'Capture EC2 Instance Info'
          - publish: $(Pipeline.Workspace)/ec2_connection_info
            artifact: EC2ConnectionInfo
