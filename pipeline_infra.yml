name: InfraPipeline_$(Date:yyyyMMdd)$(Rev:rr)
trigger:
  branches:
    include:
      - main
  paths:
    include:
      - terraform/*
pool:
  name: 'Agent pool'

variables:
  #awsServiceConnection: 'AWS_Access_Key'
  awsRegion: 'ap-south-1'
  terraformDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  terraformStateBucket: "bucket-for-speedtest"
  terraformStateKey: "terraform/terraform.tfstate"
  destroyResources: '' # Set to 'true' to enable resource destruction stage

stages:

- stage: Debug
  displayName: 'ðŸ”§ Debug Info'
  jobs:
    - job: Inspect
      steps:
        - script: |
            echo "DestroyResources = '$(destroyResources)'"
            echo "Build.Reason = '$(Build.Reason)'"
            echo "PreviousSkipped = $(dependencies.TerraformPlan.result)"
          displayName: 'Print pipeline state'

- stage: TerraformDestroy
  displayName: 'Terraform Destroy'
  condition: eq(variables['destroyResources'], 'true')
  jobs:
  - job: DestroyInfra
    displayName: 'Destroy Infrastructure'
    steps:
    - checkout: self

    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - script: |
        echo "--- Initializing Terraform for Destroy ---"
        terraform init -upgrade
      displayName: 'Terraform Init for Destroy'
      workingDirectory: '$(terraformDirectory)'

    - script: |
        echo "--- Applying Terraform Destroy ---"
        terraform destroy -auto-approve
      displayName: 'Terraform Destroy'
      workingDirectory: '$(terraformDirectory)'
    - script: |
        mkdir -p $(Pipeline.Workspace)/destroy_info
        echo "$destroyResources" > $(Pipeline.Workspace)/destroy_info/destroy_flag.txt
        echo destroyResources: $destroyResources
      displayName: 'Write destroy flag to file'

    - publish: $(Pipeline.Workspace)/destroy_info
      artifact: DestroyInfo
      displayName: 'Publish destroy flag as artifact'
    - script: |
        echo "Terraform destroy completed successfully."


- stage: TerraformPlan
  condition: ne(variables['destroyResources'], 'true') 
  displayName: 'TerraformPlan'
  jobs:
  - job: PlanInfra
    displayName: 'Generate Terraform Plan'
    steps:
    - checkout: self
    
    # step 1: Install Terraform (if not pre-installed on your self-hosted agent)
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    # step 2: Navigate to the directory containing terraform code and Initialize Terraform

    - script: |
        echo "Navigate to terraform directory: $(terraformDirectory)"
        cd $(terraformDirectory)

        echo "--- Initialize Terraform ---"
        terraform init 
      displayName: 'Terraform Init'
      workingDirectory: '$(terraformDirectory)'

    # Step 3: Generate Terraform plan
    - script: |
        echo "--- Generating Terraform Plan ---"
        terraform plan -out=tfplan.out
      displayName: 'Terraform Plan'
      workingDirectory: '$(terraformDirectory)'

- stage: TerraformApply
  displayName: 'TerraformApply'
  dependsOn: TerraformPlan
  condition: and(succeeded('TerraformPlan'), ne(variables['destroyResources'], 'true'))

  jobs:
  - job: ApplyInfra
    displayName: 'Apply Terraform Plan'
    steps:
    - checkout: self
    # --- ADDED: Install Terraform in this job too ---
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - script: |
        echo "Navigating to Terraform directory: $(terraformDirectory)"
        cd $(terraformDirectory)
        echo "--- Initializing Terraform ---"
        terraform init -upgrade
      displayName: 'Terraform Init'
      workingDirectory: '$(terraformDirectory)'
      
    - script: |
        echo "--- Applying Terraform Changes ---"
        terraform apply -auto-approve 
      displayName: 'Terraform Apply'
      workingDirectory: '$(terraformDirectory)'

    - script: |
        echo "--- Capturing EC2 Instance ID & Public IP Address ---"
        cd $(terraformDirectory)
        echo "Fetching EC2 instance ID & Public IP address from Terraform output..."
        EC2_IP=$(terraform output -raw public_ip)
        EC2_INSTANCE_ID=$(terraform output -raw instance_id)
        echo "EC2 Instance IP Address: $EC2_IP"
        echo "EC2 Instance ID: $EC2_INSTANCE_ID"

        mkdir -p $(Pipeline.Workspace)/ec2_connection_info
        echo "$EC2_IP" > $(Pipeline.Workspace)/ec2_connection_info/ip_info.txt
        echo "$EC2_INSTANCE_ID" > $(Pipeline.Workspace)/ec2_connection_info/instance_id.txt
        echo "EC2 connection info saved to $(Pipeline.Workspace)/ec2_connection_info"
      displayName: 'Capture EC2 Instance ID & Public IP Address'
      workingDirectory: '$(terraformDirectory)'
    - publish: $(Pipeline.Workspace)/ec2_connection_info
      artifact: EC2ConnectionInfo
      displayName: 'Publish EC2 Connection Info Artifact'


