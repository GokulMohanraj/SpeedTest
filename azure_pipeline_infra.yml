trigger:
  branches:
    include:
      - main
  paths:
    include:
      - terraform/*

pool:
  name: Agent

variables:
  awsServiceConnection: 'AWS_Access_Key'
  awsRegion: 'ap-south-1'
  terraformDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  terraformStateBucket: "bucket-for-speedtest"
  terraformStateKey: "terraform/terraform.tfstate"

stages:
- stage: TerraformDeploy
  displayName: 'Terraform Plan & Apply'
  jobs:
  - job: DeployInfra
    displayName: 'Provision Infrastructure'
    steps:
    - checkout: self

    # Step 1: Configure AWS CLI using the Service Connection (secure & recommended)
#    - task: UseAWSCLI@1
#      displayName: 'Configure AWS CLI Credentials'
#      inputs:
#        awsCredentials: '$(awsServiceConnection)' # References the Service Connection
#        regionName: '$(awsRegion)'

    # Step 2: Install Terraform (if not pre-installed on your self-hosted agent)
    # Use the official TerraformInstaller task. It handles installation gracefully.
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest' # Or a specific version, e.g., '1.5.0'

    # Navigate to the directory containing your Terraform files
    - script: |
        echo "Navigating to Terraform directory: $(terraformDirectory)"
        cd $(terraformDirectory)
        
        # Step 3: Initialize Terraform
        # Terraform will automatically detect the S3 backend configured in your main.tf
        # and manage state locking with DynamoDB if configured.
        echo "--- Initializing Terraform ---"
        terraform init -upgrade # -upgrade ensures provider plugins are updated if needed
      displayName: 'Terraform Init'
      workingDirectory: '$(terraformDirectory)' # Ensure commands run in the right place

    # Step 4: Generate Terraform Plan
    - script: |
        echo "--- Generating Terraform Plan ---"
        # -out=tfplan.out saves the plan to a file.
        # This plan can then be used by 'terraform apply' to ensure consistency.
        terraform plan -out=tfplan.out
      displayName: 'Terraform Plan'
      workingDirectory: '$(terraformDirectory)'

    # Step 5: (Optional but Recommended) Publish the Plan as an Artifact
    # This is useful for auditing and ensuring what was planned is what gets applied.
    - publish: $(terraformDirectory)/tfplan.out
      artifact: TerraformPlanArtifact
      displayName: 'Publish Terraform Plan Artifact'

    # Step 6: Apply Terraform Changes
    # You might want to split Plan and Apply into separate stages with an approval gate in between
    # for production environments. For now, they are in the same job for simplicity.
    - script: |
        echo "--- Applying Terraform Changes ---"
        # -auto-approve is used for automated deployments.
        # For production, consider using Azure DevOps Environments with approval gates.
        terraform apply -auto-approve tfplan.out
      displayName: 'Terraform Apply'
      workingDirectory: '$(terraformDirectory)'

    # Step 7: (Optional) Get and Publish Terraform Outputs
    # Useful if your application pipeline needs details like EC2 IP from Terraform.
    - script: |
        echo "--- Capturing Terraform Outputs ---"
        terraform output -json > tf_outputs.json
        cat tf_outputs.json
      displayName: 'Get Terraform Outputs'
      workingDirectory: '$(terraformDirectory)'
    - publish: $(terraformDirectory)/tf_outputs.json
      artifact: TerraformOutputs
      displayName: 'Publish Terraform Outputs Artifact'