name: AppPipeline_$(Date:yyyyMMdd)$(Rev:rr)

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - app/*

pool:
  name: 'Agent pool'

variables:
  DockerConnection: 'DockerHubConnection'
  awsRegion: 'ap-south-1'
  appDirectory: '$(System.DefaultWorkingDirectory)/app'
  Docker_repo: 'gokulmohanraj/speed_test_app'
  Build_tag: $(Build.BuildId)
  ec2User: 'ubuntu'
  appPort: '80'

resources:
  pipelines:
    - pipeline: InfraPipeline
      source: InfraPipeline
      trigger:
        branches:
          include:
            - main

stages:
- stage: DockerBuild
  displayName: 'Docker Build Stage'
  jobs:
  - job: BuildDockerImage
    displayName: 'Build Docker Image'
    steps:
    - script: echo "Building Docker image..."
      displayName: 'Preparation step'

    - task: Docker@2
      inputs:
        containerRegistry: '$(DockerConnection)'
        repository: '$(Docker_repo)'
        command: 'buildAndPush'
        Dockerfile: '$(appDirectory)/Dockerfile'
        tags: |
          latest
          $(Build_tag)
      displayName: 'Docker Build'

- stage: DeployToSpeedtestInstance
  displayName: 'Deploy to Speedtest Instance (via SSM)'
  dependsOn: DockerBuild
  jobs:
  - job: DeployApp
    displayName: 'Deploy Application'
    steps:
    - download: InfraPipeline
      artifact: EC2ConnectionInfo
      displayName: 'Download EC2 Connection Info Artifact'

    - script: |
        EC2_INSTANCE_ID=$(cat $(Pipeline.Workspace)/InfraPipeline/EC2ConnectionInfo/instance_id.txt)
        EC2_PUBLIC_IP=$(cat $(Pipeline.Workspace)/InfraPipeline/EC2ConnectionInfo/ip_info.txt)
        echo "Retrieved EC2 Instance ID: $EC2_INSTANCE_ID"
        echo "Retrieved EC2 Public IP: $EC2_PUBLIC_IP"
        echo "##vso[task.setvariable variable=ec2InstanceId;isOutput=true;]$EC2_INSTANCE_ID"
        echo "##vso[task.setvariable variable=ec2PublicIp;isOutput=true;]$EC2_PUBLIC_IP"
        echo "EC2_INSTANCE_ID=$EC2_INSTANCE_ID" > ec2_vars.sh
      name: setEc2OutputVariables
      displayName: 'Read and Output EC2 Info'

    - script: |
        source ec2_vars.sh
        echo "Sending SSM command to EC2 instance: $EC2_INSTANCE_ID"

        aws ssm send-command \
          --region $(awsRegion) \
          --document-name "AWS-RunShellScript" \
          --instance-ids "$EC2_INSTANCE_ID" \
          --comment "Install Docker and Deploy App" \
          --parameters 'commands=[
            "sudo apt-get update -y",
            "sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common",
            "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg",
            "sudo chmod a+r /etc/apt/keyrings/docker.gpg",
            "echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo $VERSION_CODENAME) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null",
            "sudo apt-get update -y",
            "sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin",
            "sudo systemctl start docker",
            "sudo systemctl enable docker",
            "sudo usermod -aG docker ubuntu",
            "sleep 5",
            "sudo docker pull $(Docker_repo):$(Build_tag)",
            "sudo docker stop speedtest-app || true",
            "sudo docker rm speedtest-app || true",
            "sudo docker run -d --name speedtest-app -p 80:5000 $(Docker_repo):$(Build_tag)"
          ]' \
          --output text
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(awsRegion)
      displayName: 'Run AWS CLI to Deploy App'

- stage: GetApplicationAccessInfo
  displayName: 'Get Application Access Information'
  dependsOn: DeployToSpeedtestInstance
  jobs:
  - job: GetInfo
    displayName: 'Retrieve IP and Port'
    variables:
      mappedEc2InstanceId: $[ stageDependencies.DeployToSpeedtestInstance.DeployApp.outputs['setEc2OutputVariables.ec2InstanceId'] ]
      mappedEc2PublicIp: $[ stageDependencies.DeployToSpeedtestInstance.DeployApp.outputs['setEc2OutputVariables.ec2PublicIp'] ]
    steps:
    - script: |
        APP_URL="http://$(mappedEc2PublicIp):$(appPort)"
        echo "##vso[task.setvariable variable=appAccessUrl;]$APP_URL"

        echo "--------------------------------------------------------"
        echo "Instance ID: $(mappedEc2InstanceId)"
        echo "IP Address: $(mappedEc2PublicIp)"
        echo "Port: $(appPort)"
        echo "URL: $APP_URL"
        echo "--------------------------------------------------------"
      displayName: 'Display Application Access Details'
