name: AppPipeline_$(Date:yyyyMMdd)$(Rev:rr)

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - app/*

pool:
  name: 'Agent pool'

variables:
  awsServiceConnection: 'AWS_Access_Key'
  s3Bucket: "bucket-for-speedtest"
  DockerConnection: 'DockerHubConnection'
  awsRegion: 'ap-south-1'
  appDirectory: '$(System.DefaultWorkingDirectory)/app'
  Docker_repo: 'gokulmohanraj/speed_test_app'
  Build_tag: $(Build.BuildId)
  ec2User: 'ubuntu'
  appPort: '30001'

resources:
  pipelines:
    - pipeline: InfraPipeline
      source: InfraPipeline
      trigger:
        branches:
          include:
            - main

stages:

# ------------------- Stage: Check Destroy Flag -------------------
- stage: CheckDestroy
  displayName: 'Check if Infra was Destroyed'
  jobs:
    - job: ReadFlag
      displayName: 'Read Destroy Flag'
      steps:
        - download: InfraPipeline
          artifact: DestroyInfo
          displayName: 'Download DestroyInfo Artifact (if exists)'
          continueOnError: true

        - script: |
            echo "Checking for destroy_flag.txt..."

            FLAG_FILE="$(Pipeline.Workspace)/InfraPipeline/DestroyInfo/destroy_flag.txt"

            if [ -f "$FLAG_FILE" ]; then
            FLAG_VALUE=$(cat "$FLAG_FILE")
            echo "destroy_flag.txt content: $FLAG_VALUE"

            if [ "$FLAG_VALUE" = "true" ]; then
              echo "Terraform destroy was triggered."
              echo "##vso[task.setvariable variable=destroyTriggered;isOutput=true]true"
            else
              echo "Destroy flag not set to true."
              echo "##vso[task.setvariable variable=destroyTriggered;isOutput=true]false"
            fi
            else
              echo "destroy_flag.txt not found."
              echo "##vso[task.setvariable variable=destroyTriggered;isOutput=true]false"
            fi
          name: checkDestroy
          displayName: 'Check and Set destroyTriggered'



# ------------------- Stage: Docker Build -------------------
- stage: DockerBuild
  displayName: 'Docker Build Stage'
  dependsOn: CheckDestroy
  condition: ne(dependencies.CheckDestroy.outputs['ReadFlag.checkDestroy.destroyTriggered'], 'true')
  jobs:
  - job: BuildDockerImage
    displayName: 'Build Docker Image'
    steps:
    - script: echo "Building Docker image..."
      displayName: 'Preparation step'

    - task: Docker@2
      inputs:
        containerRegistry: '$(DockerConnection)'
        repository: '$(Docker_repo)'
        command: 'buildAndPush'
        Dockerfile: '$(appDirectory)/Dockerfile'
        tags: |
          latest
          $(Build_tag)
      displayName: 'Docker Build'

# ------------------- Stage: Deploy to EC2 -------------------
- stage: DeployToSpeedtestInstance
  displayName: 'Deploy to Speedtest Instance (via SSM)'
  dependsOn: DockerBuild
  condition: succeeded()
  jobs:
  - job: DeployApp
    displayName: 'Deploy Application'
    steps:
    - download: InfraPipeline
      artifact: EC2ConnectionInfo
      displayName: 'Download EC2 Connection Info Artifact'

    - script: |
        EC2_INSTANCE_ID=$(cat $(Pipeline.Workspace)/InfraPipeline/EC2ConnectionInfo/instance_id.txt)
        EC2_PUBLIC_IP=$(cat $(Pipeline.Workspace)/InfraPipeline/EC2ConnectionInfo/ip_info.txt)
        echo "##vso[task.setvariable variable=ec2InstanceId;isOutput=true;]$EC2_INSTANCE_ID"
        echo "##vso[task.setvariable variable=ec2PublicIp;isOutput=true;]$EC2_PUBLIC_IP"
        echo "EC2_INSTANCE_ID=$EC2_INSTANCE_ID" > ec2_vars.sh
      name: setEc2OutputVariables
      displayName: 'Read and Output EC2 Info'

    - script: |
        ls $(appDirectory)
        echo "Copying deployment.yaml to S3 bucket: $(s3Bucket)"
        aws s3 cp $(appDirectory)/deployment.yaml s3://$(s3Bucket)/k8s-deployment-files/deployment.yaml
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(awsRegion)
      displayName: 'Upload deployment.yaml using AWS CLI'

    - script: |
        source ec2_vars.sh
        echo "Sending SSM command to EC2 instance: $EC2_INSTANCE_ID"

        aws ssm send-command \
          --region $(awsRegion) \
          --document-name "AWS-RunShellScript" \
          --instance-ids "$EC2_INSTANCE_ID" \
          --comment "Install K3s and Deploy App" \
          --parameters 'commands=[
              "sudo apt-get update -y",
              "sudo apt-get install -y curl unzip",
              "curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"",
              "unzip awscliv2.zip",
              "sudo ./aws/install",
              "aws --version",
              "bash -c \"curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=\\\"--write-kubeconfig-mode 644\\\" sh -\"",
              "sleep 10",
              "mkdir -p /home/ubuntu/app",
              "aws s3 cp s3://bucket-for-speedtest/k8s-deployment-files/deployment.yaml /home/ubuntu/app/deployment.yaml",
              "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml",
              "kubectl apply -f /home/ubuntu/app/deployment.yaml"
            ]'\
          --output text
      env:
        AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        AWS_DEFAULT_REGION: $(awsRegion)
      displayName: 'Run AWS CLI to Deploy App'

# ------------------- Stage: Get App Access Info -------------------
- stage: GetApplicationAccessInfo
  displayName: 'Get Application Access Information'
  dependsOn: DeployToSpeedtestInstance
  condition: succeeded()
  jobs:
  - job: GetInfo
    displayName: 'Retrieve IP and Port'
    variables:
      mappedEc2InstanceId: $[ stageDependencies.DeployToSpeedtestInstance.DeployApp.outputs['setEc2OutputVariables.ec2InstanceId'] ]
      mappedEc2PublicIp: $[ stageDependencies.DeployToSpeedtestInstance.DeployApp.outputs['setEc2OutputVariables.ec2PublicIp'] ]
    steps:
    - script: |
        APP_URL="http://$(mappedEc2PublicIp):$(appPort)"
        echo "##vso[task.setvariable variable=appAccessUrl;]$APP_URL"

        echo "URL: $APP_URL"
      displayName: 'Display Application Access Details'
